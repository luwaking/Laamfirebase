rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Traders: readable by all, writable only by admins (use custom claims)
    match /traders/{traderId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Offers: buyer and trader can read, buyer can create, trader and admin can update status
    match /offers/{offerId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || resource.data.traderId == request.auth.uid || request.auth.token.admin == true);
      allow update: if request.auth != null && (
        // buyer can cancel before accepted
        (request.resource.data.userId == request.auth.uid && request.resource.data.status in ['pending','cancelled']) ||
        // trader or admin can accept/mark escrow
        (resource.data.traderId == request.auth.uid || request.auth.token.admin == true)
      );
      allow delete: if false;
    }

    // Chats: participants only
    match /chats/{chatId} {
      allow read, write: if request.auth != null && (request.auth.uid in resource.data.participants);
      // messages subcollection
      match /messages/{msgId} {
        allow create: if request.auth != null && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow read: if request.auth != null && (request.auth.uid in resource.data.participants || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
      }
    }

    // default
    match /{document=**} { allow read: if false; allow write: if false; }
  }
}
